import base64
import re
from Crypto.Cipher import AES
import json
import zlib


# 解密后，去掉补足的空格用strip() 去掉
def decrypt(text, key):
    key = key.encode('utf-8')
    mode = AES.MODE_ECB
    cryptos = AES.new(key, mode)
    plain_text = cryptos.decrypt(base64.b64decode(text))
    plain_text = plain_text[:- ord(plain_text[len(plain_text) - 1:])]
    return plain_text.hex()


def c(text):
    # 初始化一个空列表，用于存储每两位的字符串
    result = []
    # 使用循环遍历字符串
    matches = re.findall(r'[\da-fA-F]{2}', text)
    for i in matches:
        result.append(int(i, 16))
    # 压缩的数据
    compressed_data = bytearray(result)
    # 初始化 Zlib 解压缩对象
    decompressor = zlib.decompressobj(zlib.MAX_WBITS | 16)
    # 解压缩数据
    decompressed_data = decompressor.decompress(compressed_data)
    # 结束解压缩
    decompressed_data += decompressor.flush()
    return decompressed_data.decode()


if __name__ == '__main__':
    url_end = '/api/kline'
    montage_str = f"coinglass{url_end}coinglass"
    b64_str = base64.b64encode(montage_str.encode()).decode()
    # 注意resp_user就是返回的请求头中的User参数
    resp_user = "Ka6cND4Pa9hOhggT877PFodr8GVIQdRZFYIL40F7Sot/UDUoiTOfkPwwxCNuSzik"
    d = decrypt(resp_user, b64_str[:16])  # 解密
    key = c(d)
    sign = ''
    d = decrypt(sign, key)  # 解密
    i = c(d)
    decript_json = json.loads(i)
    print("解密:", decript_json)